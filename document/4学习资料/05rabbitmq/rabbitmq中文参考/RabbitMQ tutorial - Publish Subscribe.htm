<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0048)http://adamlu.net/rabbitmq/tutorial-three-python -->
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta name="description" content="RabbitMQ is a complete and highly reliable enterprise messaging system based on the emerging AMQP standard"><meta name="googlebot" content="NOODP"><meta name="google-site-verification" content="nSYeDgyKM9mw5CWcZuD0xu7iSWXlJijAlg9rcxVOYf4"><meta name="google-site-verification" content="6UEaC3SWhpGQvqRnSJIEm2swxXpM5Adn4dxZhFsNdw0"><link rel="stylesheet" href="./RabbitMQ tutorial - Publish Subscribe_files/rabbit.css" type="text/css"><link rel="icon" type="/image/vnd.microsoft.icon" href="http://www.rabbitmq.com/favicon.ico"><link rel="stylesheet" href="./RabbitMQ tutorial - Publish Subscribe_files/tutorial.css" type="text/css"><script type="text/javascript" async="" src="./RabbitMQ tutorial - Publish Subscribe_files/ga.js"></script><script src="./RabbitMQ tutorial - Publish Subscribe_files/ga(1).js" async="" type="text/javascript"></script><script type="text/javascript" src="./RabbitMQ tutorial - Publish Subscribe_files/site.js"></script><style type="text/css"></style><script type="text/javascript" src="./RabbitMQ tutorial - Publish Subscribe_files/ga-bootstrap.js"></script>
    <title>RabbitMQ tutorial - Publish/Subscribe</title>
  <style>[touch-action="none"]{ -ms-touch-action: none; touch-action: none; }[touch-action="pan-x"]{ -ms-touch-action: pan-x; touch-action: pan-x; }[touch-action="pan-y"]{ -ms-touch-action: pan-y; touch-action: pan-y; }[touch-action="scroll"],[touch-action="pan-x pan-y"],[touch-action="pan-y pan-x"]{ -ms-touch-action: pan-x pan-y; touch-action: pan-x pan-y; }</style><style id="style-1-cropbar-clipper">/* Copyright 2014 Evernote Corporation. All rights reserved. */
.en-markup-crop-options {
    top: 18px !important;
    left: 50% !important;
    margin-left: -90px !important;
    width: 180px !important;
    border: 2px rgba(255,255,255,.38) solid !important;
    border-radius: 4px !important;
}

.en-markup-crop-options div div:first-of-type {
    margin-left: 0px !important;
}
</style></head>
  <body><div id="outerContainer"><h1><a href="http://www.rabbitmq.com/"><img src="./RabbitMQ tutorial - Publish Subscribe_files/rabbitmq_logo_strap.png" alt="RabbitMQ" border="0" height="76" width="361"></a></h1><div class="s2-logo"><a href="http://www.springsource.com/"><img src="./RabbitMQ tutorial - Publish Subscribe_files/spring09_logo.png" alt="SpringSource" border="0" height="50" width="240"></a></div><div id="search-box"><form action="http://adamlu.net/search.html" method="get"><input name="q" size="25" id="search-query" value="Search RabbitMQ" onfocus="handle_SearchBoxFocus();" onblur="handle_SearchBoxBlur();" type="text"><input id="search-button" alt="Search" value="" type="submit"></form></div><ul class="mainNav"><li><a href="http://www.rabbitmq.com/download.html">Download</a></li><li><a href="http://www.rabbitmq.com/documentation.html">Documentation</a></li><li><a href="http://www.rabbitmq.com/getstarted.html">Get Started</a></li><li><a href="http://www.rabbitmq.com/services.html">Services</a></li><li><a href="http://www.rabbitmq.com/contact.html">Community</a></li><li><a href="http://www.rabbitmq.com/blog/">Blog</a></li></ul><div class="nav-separator"></div>
<div id="sidebar" class="tutorial-three">
   <ul xmlns="" id="tutorials">
        <li id="tutorial-zero">
          <h2><span class="tute-num">0</span> <a href="http://www.rabbitmq.com/tutorials/amqp-concepts.html">AMQP Concepts</a></h2>
          <p>
            <img src="./RabbitMQ tutorial - Publish Subscribe_files/amqp-concepts.png" width="180">
          </p>
        </li>
        <li id="tutorial-one">
          <h2><span class="tute-num">1</span> <a href="http://www.rabbitmq.com/tutorials/tutorial-one-python.html">"Hello World!"</a></h2>
          <p>
            The simplest thing that does <em>something</em>
          </p>
          <p><img src="./RabbitMQ tutorial - Publish Subscribe_files/python-one.png" width="180"></p>
          <p>
          <a href="http://www.rabbitmq.com/tutorials/tutorial-one-python.html">Python</a>
          |
          <a href="http://www.rabbitmq.com/tutorials/tutorial-one-java.html">Java</a>
          </p>
        </li>
        <li id="tutorial-two">
          <h2><span class="tute-num">2</span> <a href="http://www.rabbitmq.com/tutorials/tutorial-two-python.html">Work queues</a></h2>
          <p>
            Distributing tasks among workers
          </p>
          <p><img src="./RabbitMQ tutorial - Publish Subscribe_files/python-two.png" height="50" width="180"></p>
          <p>
          <a href="http://www.rabbitmq.com/tutorials/tutorial-two-python.html">Python</a>
          |
          <a href="http://www.rabbitmq.com/tutorials/tutorial-two-java.html">Java</a>
          </p>
        </li>
        <li id="tutorial-three">
          <h2><span class="tute-num">3</span> <a href="http://www.rabbitmq.com/tutorials/tutorial-three-python.html">Publish/Subscribe</a></h2>
          <p>
            Sending messages to many consumers at once
          </p>
          <p><img src="./RabbitMQ tutorial - Publish Subscribe_files/python-three.png" height="50" width="180"></p>
          <p>
          <a href="http://www.rabbitmq.com/tutorials/tutorial-three-python.html">Python</a>
          |
          <a href="http://www.rabbitmq.com/tutorials/tutorial-three-java.html">Java</a>
          </p>
        </li>

        <li id="tutorial-four">
          <h2><span class="tute-num">4</span> <a href="http://www.rabbitmq.com/tutorials/tutorial-four-python.html">Routing</a></h2>
          <p>
	    Receiving messages selectively
          </p>
          <p><img src="./RabbitMQ tutorial - Publish Subscribe_files/python-four.png" height="50" width="180"></p>
          <p>
          <a href="http://www.rabbitmq.com/tutorials/tutorial-four-python.html">Python</a>
          |
          <a href="http://www.rabbitmq.com/tutorials/tutorial-four-java.html">Java</a>
          </p>
        </li>

        <li id="tutorial-five">
          <h2><span class="tute-num">5</span> <a href="http://www.rabbitmq.com/tutorials/tutorial-five-python.html">Topics</a></h2>
          <p>
	    Receiving messages based on a pattern
          </p>
          <p><img src="./RabbitMQ tutorial - Publish Subscribe_files/python-five.png" height="50" width="180"></p>
          <p>
          <a href="http://www.rabbitmq.com/tutorials/tutorial-five-python.html">Python</a>
          |
          <a href="http://www.rabbitmq.com/tutorials/tutorial-five-java.html">Java</a>
          </p>
        </li>

        <li id="tutorial-six">
          <h2><span class="tute-num">6</span> <a href="http://www.rabbitmq.com/tutorials/tutorial-six-python.html">RPC</a></h2>
          <p>
	    Remote procedure call implementation
          </p>
          <p><img src="./RabbitMQ tutorial - Publish Subscribe_files/python-six.png" height="50" width="180"></p>
          <p>
          <a href="http://www.rabbitmq.com/tutorials/tutorial-six-python.html">Python</a>
          |
          <a href="http://www.rabbitmq.com/tutorials/tutorial-six-java.html">Java</a>
          </p>
        </li>
      </ul>
</div>

<div id="tutorial">

<h2>发布／订阅</h2>
<h3>（使用pika 0.9.5 Python客户端）</h3>
<div xmlns="" class="aside">
    <h3>从哪里获得帮助</h3>
    <p>
        如果你在这篇教程中遇到了困难，你可以通过讨论列表或者直接
        <a href="http://www.rabbitmq.com/contact.html">联系我们</a>
    </p>

  </div>

<p>在<a href="http://www.rabbitmq.com/tutorials/tutorial-two-python.html">上篇教程</a>中，我们搭建了一个工作队列。每个任务之分发给一个工作者（worker）。在本篇教程中，我们要做的之前完全不一样——分发一个消息给多个消费者（consumers）。这种模式被称为“发布／订阅”。</p>
<p>为了描述这种模式，我们将会构建一个简单的日志系统。它包括两个程序——第一个程序负责发送日志消息，第二个程序负责获取消息并输出内容。</p>
<p>在我们的这个日志系统中，所有正在运行的接收方程序都会接受消息。我们用其中一个接收者（receiver）把日志写入硬盘中，另外一个接受者（receiver）把日志输出到屏幕上。</p>
<p>最终，日志消息被广播给所有的接受者（receivers）。</p>
<h2>交换器（Exchanges）</h2>
<p>前面的教程，我们发送消息到队列并从中取出消息。现在是时候介绍RabbitMq中完整的消息模型了。</p>
<p>让我们简单的概括一下之前的教程：</p>
<ul>
<li><em>发布者（producer）</em>是发布消息的应用程序。</li>
<li><em>队列（queue）</em>用于消息存储的缓冲。</li>
<li><em>消费者（consumer）</em>是接收消息的应用程序。</li>
</ul>
<p>RabbitMQ消息模型的核心理念是：发布者（producer）不会直接发送任何消息给队列。事实上，发布者（producer）甚至不知道消息是否已经被投递到队列。</p>
<p>发布者（producer）只需要把消息发送给一个<em>交换器（exchange）</em>。交换器非常简单，它一边从发布者方接收消息，一边把消息推入队列。交换器必须知道如何处理它接收到的消息，是应该推送到指定的队列还是是多个队列，或者是直接忽略消息。这些规则是通过<em>exchange type</em>来定义的。</p>
<div class="diagram">
  <img src="./RabbitMQ tutorial - Publish Subscribe_files/exchanges.png" height="110">
  <div class="diagram_source">
    digraph {
      bgcolor=transparent;
      truecolor=true;
      rankdir=LR;
      node [style="filled"];
      //
      P1 [label="P", fillcolor="#00ffff"];
      X [label="X", fillcolor="#3333CC"];
      Q1 [label="{||||}", fillcolor="red", shape="record"];
      Q2 [label="{||||}", fillcolor="red", shape="record"];
      //
      P1 -&gt; X;
      X -&gt; Q1;
      X -&gt; Q2;
    }
  </div>
</div>

<p>有几个可供选择的交换器类型：<span class="code ">direct</span>, <span class="code ">topic</span>, <span class="code ">headers</span>和 <span class="code ">fanout</span>。我们在这里主要说明最后一个——fanout。先创建一个fanout类型的交换器，命名为<span class="code">logs</span>：</p>

<div class="highlight"><pre><span class="n">channel</span><span class="o">.</span><span class="n">exchange_declare</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s">'logs'</span><span class="p">,</span>
                         <span class="nb">type</span><span class="o">=</span><span class="s">'fanout'</span><span class="p">)</span>
</pre></div>

<p>fanout交换器很简单，你可能从名字上就能猜测出来，它把消息发送给它所知道的所有队列。这正是我们的日志系统所需要的。</p>
<blockquote>
<h4>交换器列表</h4>
<p><span class="code">rabbitmqctl</span>能够列出服务器上所有的交换器：</p>
<div class="highlight"><pre><span class="nv">$ </span>sudo rabbitmqctl list_exchanges
Listing exchanges ...
logs      fanout
amq.direct      direct
amq.topic       topic
amq.fanout      fanout
amq.headers     headers
...done.
</pre></div>

<p>这个列表中有一些叫做<span class="code">amq.*</span>的交换器。这些都是默认创建的，不过这时候你还不需要使用他们。</p>
<h4>匿名的交换器</h4>
<p>前面的教程中我们对交换器一无所知，但仍然能够发送消息到队列中。因为我们使用了命名为空字符串(<span class="code">""</span>)默认的交换器。</p>
<p>回想我们之前是如何发布一则消息：</p>
<div class="highlight"><pre><span class="n">channel</span><span class="o">.</span><span class="n">basic_publish</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s">''</span><span class="p">,</span>
                      <span class="n">routing_key</span><span class="o">=</span><span class="s">'hello'</span><span class="p">,</span>
                      <span class="n">body</span><span class="o">=</span><span class="n">message</span><span class="p">)</span>
</pre></div>

<p><span class="code">exchange</span>参数就是交换器的名称。空字符串代表默认或者匿名交换器：消息将会根据指定的<span class="code">routing_key</span>分发到指定的队列。</p>
</blockquote>
<p>现在，我们就可以发送消息到一个具名交换器了：</p>
<div class="highlight"><pre><span class="n">channel</span><span class="o">.</span><span class="n">basic_publish</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s">'logs'</span><span class="p">,</span>
                      <span class="n">routing_key</span><span class="o">=</span><span class="s">''</span><span class="p">,</span>
                      <span class="n">body</span><span class="o">=</span><span class="n">message</span><span class="p">)</span>
</pre></div>

<h2>临时队列</h2>
<p>你还记得之前我们使用的队列名吗（ <span class="code ">hello</span>和<span class="code ">task_queue</span>）？给一个队列命名是很重要的——我们需要把工作者（workers）指向正确的队列。如果你打算在发布者（producers）和消费者（consumers）之间共享同队列的话，给队列命名是十分重要的。</p>
<p>但是这并不适用于我们的日志系统。我们打算接收所有的日志消息，而不仅仅是一小部分。我们关心的是最新的消息而不是旧的。为了解决这个问题，我们需要做两件事情。</p>
<p>首先，当我们连接上RabbitMQ的时候，我们需要一个全新的、空的队列。我们可以手动创建一个随机的队列名，或者让服务器为我们选择一个随机的队列名（推荐）。我们只要在调用<span class="code">queue_declare</span>方法的时候，不提供<span class="code">queue</span>参数就可以了：</p>

<div class="highlight"><pre><span class="n">result</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">()</span>
</pre></div>
<p>这时候我们可以通过<span class="code ">result.method.queue</span>获得已经生成的随机队列名。它可能是这样子的：<span class="code ">amq.gen-U0srCoW8TsaXjNh73pnVAw==</span>。</p>
<p>第二步，当与消费者（consumer）断开连接的时候，这个队列应当被删除。我们可以使用<span class="code ">exclusive</span>标识。 </p>

<div class="highlight"><pre><span class="n">result</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">exclusive</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</pre></div>

<h2>绑定（Bindings）</h2>
<div class="diagram">
  <img src="./RabbitMQ tutorial - Publish Subscribe_files/bindings.png" height="90">
  <div class="diagram_source">
    digraph {
      bgcolor=transparent;
      truecolor=true;
      rankdir=LR;
      node [style="filled"];
      //
      P1 [label="P", fillcolor="#00ffff"];
      X [label="X", fillcolor="#3333CC"];
      Q1 [label="{||||}", fillcolor="red", shape="record"];
      Q2 [label="{||||}", fillcolor="red", shape="record"];
      //
      P1 -&gt; X;
      X -&gt; Q1 [label="binding"];
      X -&gt; Q2 [label="binding"];
    }
  </div>
</div>

<p>我们已经创建了一个fanout类型的交换器和一个队列。现在我们需要告诉交换器如何发送消息给我们的队列。交换器和队列之间的关系我们称之为<em>绑定（binding）</em>。</p>

<div class="highlight"><pre><span class="n">channel</span><span class="o">.</span><span class="n">queue_bind</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s">'logs'</span><span class="p">,</span>
                   <span class="n">queue</span><span class="o">=</span><span class="n">result</span><span class="o">.</span><span class="n">method</span><span class="o">.</span><span class="n">queue</span><span class="p">)</span>
</pre></div>


<p>现在，<span class="code">logs</span>交换器将会把消息添加到我们的队列中。</p>
<blockquote>
<h4>绑定列表。</h4>
<p>你可以使用<span class="code ">rabbitmqctl list_bindings</span>队列出所有存在的绑定。.</p>
</blockquote>
<h2>整合</h2>
<div class="diagram">
  <img src="./RabbitMQ tutorial - Publish Subscribe_files/python-three-overall.png" height="160">
  <div class="diagram_source">
    digraph {
      bgcolor=transparent;
      truecolor=true;
      rankdir=LR;
      node [style="filled"];
      //
      P [label="P", fillcolor="#00ffff"];
      X [label="X", fillcolor="#3333CC"];
      subgraph cluster_Q1 {
        label="amq.gen-RQ6...";
    color=transparent;
        Q1 [label="{||||}", fillcolor="red", shape="record"];
      };
      subgraph cluster_Q2 {
        label="amq.gen-As8...";
    color=transparent;
        Q2 [label="{||||}", fillcolor="red", shape="record"];
      };
      C1 [label=&lt;C&lt;font point-size="7"&gt;1&lt;/font&gt;&gt;, fillcolor="#33ccff"];
      C2 [label=&lt;C&lt;font point-size="7"&gt;2&lt;/font&gt;&gt;, fillcolor="#33ccff"];
      //
      P -&gt; X;
      X -&gt; Q1;
      X -&gt; Q2;
      Q1 -&gt; C1;
      Q2 -&gt; C2;
    }
  </div>
</div>

<p>发布日志消息的程序看起来和之前的没有太大区别。最重要的改变就是我们把消息发送给<span class="code">logs</span>交换器而不是匿名交换器。在发送的时候我们需要提供<span class="code ">routing_key</span>参数，但是它的值会被<span class="code ">fanout</span>交换器忽略。以下是<span class="code ">emit_log.py</span>脚本：</p>

<table class="highlighttable" border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>
<span class="k">import</span> <span class="nn">pika</span>
<span class="k">import</span> <span class="nn">sys</span>

<span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span>
        <span class="n">host</span><span class="o">=</span><span class="s">'localhost'</span><span class="p">))</span>
<span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>

<span class="n">channel</span><span class="o">.</span><span class="n">exchange_declare</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s">'logs'</span><span class="p">,</span>
                         <span class="nb">type</span><span class="o">=</span><span class="s">'fanout'</span><span class="p">)</span>

<span class="n">message</span> <span class="o">=</span> <span class="s">' '</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mf">1</span><span class="p">:])</span> <span class="ow">or</span> <span class="s">"info: Hello World!"</span>
<span class="n">channel</span><span class="o">.</span><span class="n">basic_publish</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s">'logs'</span><span class="p">,</span>
                      <span class="n">routing_key</span><span class="o">=</span><span class="s">''</span><span class="p">,</span>
                      <span class="n">body</span><span class="o">=</span><span class="n">message</span><span class="p">)</span>
<span class="k">print</span> <span class="s">" [x] Sent </span><span class="si">%r</span><span class="s">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">message</span><span class="p">,)</span>
<span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>
</td></tr></tbody></table>

<p><a href="http://github.com/rabbitmq/rabbitmq-tutorials/blob/master/python/emit_log.py">(emit_log.py source)</a></p>
<p>正如你看到的那样，在连接成功之后，我们声明了一个交换器，这一个是很重要的，因为不允许发布消息到不存在的交换器。</p>
<p>如果没有绑定队列到交换器，消息将会丢失。但这个没有所谓，如果没有消费者监听，那么消息就会被忽略。</p>

<p><span class="code ">receive_logs.py</span>的代码：</p>
<table class="highlighttable" border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>
<span class="k">import</span> <span class="nn">pika</span>

<span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span>
        <span class="n">host</span><span class="o">=</span><span class="s">'localhost'</span><span class="p">))</span>
<span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>

<span class="n">channel</span><span class="o">.</span><span class="n">exchange_declare</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s">'logs'</span><span class="p">,</span>
                         <span class="nb">type</span><span class="o">=</span><span class="s">'fanout'</span><span class="p">)</span>

<span class="n">result</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">exclusive</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">queue_name</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">method</span><span class="o">.</span><span class="n">queue</span>

<span class="n">channel</span><span class="o">.</span><span class="n">queue_bind</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s">'logs'</span><span class="p">,</span>
                   <span class="n">queue</span><span class="o">=</span><span class="n">queue_name</span><span class="p">)</span>

<span class="k">print</span> <span class="s">' [*] Waiting for logs. To exit press CTRL+C'</span>

<span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">ch</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">properties</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
    <span class="k">print</span> <span class="s">" [x] </span><span class="si">%r</span><span class="s">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">body</span><span class="p">,)</span>

<span class="n">channel</span><span class="o">.</span><span class="n">basic_consume</span><span class="p">(</span><span class="n">callback</span><span class="p">,</span>
                      <span class="n">queue</span><span class="o">=</span><span class="n">queue_name</span><span class="p">,</span>
                      <span class="n">no_ack</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">channel</span><span class="o">.</span><span class="n">start_consuming</span><span class="p">()</span>
</pre></div>
</td></tr></tbody></table>

<p><a href="http://github.com/rabbitmq/rabbitmq-tutorials/blob/master/python/receive_logs.py">(receive_logs.py source)</a></p>
<p>这样我们就完成了。如果你想把日志保存到文件中，只需要打开控制台输入：</p>
<div class="highlight"><pre><span class="nv">$ </span>python receive_logs.py &gt; logs_from_rabbit.log
</pre></div>


<p>如果你想在屏幕中查看日志，那么打开一个新的终端然后运行：</p>
<div class="highlight"><pre><span class="nv">$ </span>python receive_logs.py
</pre></div>


<p>当然还要发送日志：</p>
<div class="highlight"><pre><span class="nv">$ </span>python emit_log.py
</pre></div>


<p>使用<span class="code">rabbitmqctl list_bindings</span>你可确认已经创建了队列的绑定。你可以看到运行中的两个<span class="code ">receive_logs.py</span>程序：</p>

<div class="highlight"><pre><span class="nv">$ </span>sudo rabbitmqctl list_bindings
Listing bindings ...
 ...
logs    amq.gen-TJWkez28YpImbWdRKMa8sg<span class="o">==</span>                <span class="o">[]</span>
logs    amq.gen-x0kymA4yPzAT6BoC/YP+zw<span class="o">==</span>                <span class="o">[]</span>
...done.
</pre></div>


<p>显示结果很直观：<span class="code">logs</span>交换器把数据发送给两个系统命名的队列。这就是我们所期望的。</p>

<p>To find out how to listen for a subset of messages, let's move on to 
<a href="http://www.rabbitmq.com/tutorials/tutorial-four-python.html">tutorial 4</a></p>

<p>如何监听消息的子集呢？让我们移步<a href="http://www.rabbitmq.com/tutorials/tutorial-four-python.html">教程4</a></p>

</div><div class="clear"></div><div class="pageFooter"><p class="righter"><a href="http://www.rabbitmq.com/contact.html">Contact</a> |
        <a href="http://www.rabbitmq.com/about.html">About</a></p><p>Copyright © 2011 VMware, Inc. All rights reserved.</p></div></div>


</body></html>