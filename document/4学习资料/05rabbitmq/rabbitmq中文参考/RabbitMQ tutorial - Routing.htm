<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0047)http://adamlu.net/rabbitmq/tutorial-four-python -->
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta name="description" content="RabbitMQ is a complete and highly reliable enterprise messaging system based on the emerging AMQP standard"><meta name="googlebot" content="NOODP"><meta name="google-site-verification" content="nSYeDgyKM9mw5CWcZuD0xu7iSWXlJijAlg9rcxVOYf4"><meta name="google-site-verification" content="6UEaC3SWhpGQvqRnSJIEm2swxXpM5Adn4dxZhFsNdw0"><link rel="stylesheet" href="./RabbitMQ tutorial - Routing_files/rabbit.css" type="text/css"><link rel="icon" type="/image/vnd.microsoft.icon" href="http://www.rabbitmq.com/favicon.ico"><link rel="stylesheet" href="./RabbitMQ tutorial - Routing_files/tutorial.css" type="text/css"><script type="text/javascript" async="" src="./RabbitMQ tutorial - Routing_files/ga.js"></script><script src="./RabbitMQ tutorial - Routing_files/ga(1).js" async="" type="text/javascript"></script><script type="text/javascript" src="./RabbitMQ tutorial - Routing_files/site.js"></script><style type="text/css"></style><script type="text/javascript" src="./RabbitMQ tutorial - Routing_files/ga-bootstrap.js"></script>
    <title>RabbitMQ tutorial - Routing</title>
  <style>[touch-action="none"]{ -ms-touch-action: none; touch-action: none; }[touch-action="pan-x"]{ -ms-touch-action: pan-x; touch-action: pan-x; }[touch-action="pan-y"]{ -ms-touch-action: pan-y; touch-action: pan-y; }[touch-action="scroll"],[touch-action="pan-x pan-y"],[touch-action="pan-y pan-x"]{ -ms-touch-action: pan-x pan-y; touch-action: pan-x pan-y; }</style><style id="style-1-cropbar-clipper">/* Copyright 2014 Evernote Corporation. All rights reserved. */
.en-markup-crop-options {
    top: 18px !important;
    left: 50% !important;
    margin-left: -90px !important;
    width: 180px !important;
    border: 2px rgba(255,255,255,.38) solid !important;
    border-radius: 4px !important;
}

.en-markup-crop-options div div:first-of-type {
    margin-left: 0px !important;
}
</style></head>
  <body><div id="outerContainer"><h1><a href="http://www.rabbitmq.com/"><img src="./RabbitMQ tutorial - Routing_files/rabbitmq_logo_strap.png" alt="RabbitMQ" border="0" height="76" width="361"></a></h1><div class="s2-logo"><a href="http://www.springsource.com/"><img src="./RabbitMQ tutorial - Routing_files/spring09_logo.png" alt="SpringSource" border="0" height="50" width="240"></a></div><div id="search-box"><form action="http://adamlu.net/search.html" method="get"><input name="q" size="25" id="search-query" value="Search RabbitMQ" onfocus="handle_SearchBoxFocus();" onblur="handle_SearchBoxBlur();" type="text"><input id="search-button" alt="Search" value="" type="submit"></form></div><ul class="mainNav"><li><a href="http://www.rabbitmq.com/download.html">Download</a></li><li><a href="http://www.rabbitmq.com/documentation.html">Documentation</a></li><li><a href="http://www.rabbitmq.com/getstarted.html">Get Started</a></li><li><a href="http://www.rabbitmq.com/services.html">Services</a></li><li><a href="http://www.rabbitmq.com/contact.html">Community</a></li><li><a href="http://www.rabbitmq.com/blog/">Blog</a></li></ul><div class="nav-separator"></div>
<div id="sidebar" class="tutorial-four">
   <ul xmlns="" id="tutorials">
        <li id="tutorial-zero">
          <h2><span class="tute-num">0</span> <a href="http://www.rabbitmq.com/tutorials/amqp-concepts.html">AMQP Concepts</a></h2>
          <p>
            <img src="./RabbitMQ tutorial - Routing_files/amqp-concepts.png" width="180">
          </p>
        </li>
        <li id="tutorial-one">
          <h2><span class="tute-num">1</span> <a href="http://www.rabbitmq.com/tutorials/tutorial-one-python.html">"Hello World!"</a></h2>
          <p>
            The simplest thing that does <em>something</em>
          </p>
          <p><img src="./RabbitMQ tutorial - Routing_files/python-one.png" width="180"></p>
          <p>
          <a href="http://www.rabbitmq.com/tutorials/tutorial-one-python.html">Python</a>
          |
          <a href="http://www.rabbitmq.com/tutorials/tutorial-one-java.html">Java</a>
          </p>
        </li>
        <li id="tutorial-two">
          <h2><span class="tute-num">2</span> <a href="http://www.rabbitmq.com/tutorials/tutorial-two-python.html">Work queues</a></h2>
          <p>
            Distributing tasks among workers
          </p>
          <p><img src="./RabbitMQ tutorial - Routing_files/python-two.png" height="50" width="180"></p>
          <p>
          <a href="http://www.rabbitmq.com/tutorials/tutorial-two-python.html">Python</a>
          |
          <a href="http://www.rabbitmq.com/tutorials/tutorial-two-java.html">Java</a>
          </p>
        </li>
        <li id="tutorial-three">
          <h2><span class="tute-num">3</span> <a href="http://www.rabbitmq.com/tutorials/tutorial-three-python.html">Publish/Subscribe</a></h2>
          <p>
            Sending messages to many consumers at once
          </p>
          <p><img src="./RabbitMQ tutorial - Routing_files/python-three.png" height="50" width="180"></p>
          <p>
          <a href="http://www.rabbitmq.com/tutorials/tutorial-three-python.html">Python</a>
          |
          <a href="http://www.rabbitmq.com/tutorials/tutorial-three-java.html">Java</a>
          </p>
        </li>

        <li id="tutorial-four">
          <h2><span class="tute-num">4</span> <a href="http://www.rabbitmq.com/tutorials/tutorial-four-python.html">Routing</a></h2>
          <p>
	    Receiving messages selectively
          </p>
          <p><img src="./RabbitMQ tutorial - Routing_files/python-four.png" height="50" width="180"></p>
          <p>
          <a href="http://www.rabbitmq.com/tutorials/tutorial-four-python.html">Python</a>
          |
          <a href="http://www.rabbitmq.com/tutorials/tutorial-four-java.html">Java</a>
          </p>
        </li>

        <li id="tutorial-five">
          <h2><span class="tute-num">5</span> <a href="http://www.rabbitmq.com/tutorials/tutorial-five-python.html">Topics</a></h2>
          <p>
	    Receiving messages based on a pattern
          </p>
          <p><img src="./RabbitMQ tutorial - Routing_files/python-five.png" height="50" width="180"></p>
          <p>
          <a href="http://www.rabbitmq.com/tutorials/tutorial-five-python.html">Python</a>
          |
          <a href="http://www.rabbitmq.com/tutorials/tutorial-five-java.html">Java</a>
          </p>
        </li>

        <li id="tutorial-six">
          <h2><span class="tute-num">6</span> <a href="http://www.rabbitmq.com/tutorials/tutorial-six-python.html">RPC</a></h2>
          <p>
	    Remote procedure call implementation
          </p>
          <p><img src="./RabbitMQ tutorial - Routing_files/python-six.png" height="50" width="180"></p>
          <p>
          <a href="http://www.rabbitmq.com/tutorials/tutorial-six-python.html">Python</a>
          |
          <a href="http://www.rabbitmq.com/tutorials/tutorial-six-java.html">Java</a>
          </p>
        </li>
      </ul>
</div>

<div id="tutorial">

<h2>路由(Routing)</h2>
<h3>（使用pika 0.9.5 Python客户端）</h3>
<div class="aside" xmlns="">
     <h3>从哪里获得帮助</h3>
     <p>
        如果你在这篇教程中遇到了困难，你可以通过讨论列表或者直接
        <a href="http://www.rabbitmq.com/contact.html">联系我们</a>
     </p>
</div>

<p>在<a href="http://www.rabbitmq.com/tutorials/tutorial-three-python.html">前面</a>的教程中，我们实现了一个简单的日志系统。可以把日志消息广播给多个接收者。</p>
<p>本篇教程中我们打算新增一个功能——使得它能够只订阅消息的一个字集。例如，我们只需要把严重的错误日志信息写入日志文件（存储到磁盘），但同时仍然把所有的日志信息输出到控制台中</p>
<h2>绑定（Bindings）</h2>
<p>前面的例子，我们已经创建过绑定（bindings），代码如下：</p>
<div class="highlight"><pre><span class="n">channel</span><span class="o">.</span><span class="n">queue_bind</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="n">exchange_name</span><span class="p">,</span>
                   <span class="n">queue</span><span class="o">=</span><span class="n">queue_name</span><span class="p">)</span>
</pre></div>

<p>绑定（binding）是指交换器（exchange）和队列（queue）的关系。可以简单理解为：这个队列（queue）对这个交换器（exchange）的消息感兴趣。</p>
<p>绑定的时候可以带上一个额外的<span class="code ">routing_key</span>参数。为了避免与<span class="code ">basic_publish</span>的参数混淆，我们把它叫做<span class="code ">binding key</span>。以下是如何创建一个带binding key的绑定。</p>
<div class="highlight"><pre><span class="n">channel</span><span class="o">.</span><span class="n">queue_bind</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="n">exchange_name</span><span class="p">,</span>
                   <span class="n">queue</span><span class="o">=</span><span class="n">queue_name</span><span class="p">,</span>
                   <span class="n">routing_key</span><span class="o">=</span><span class="s">'black'</span><span class="p">)</span>
</pre></div>

<p>binding key的含义取决于交换器（exchange）的类型。我们之前使用过的<span class="code ">fanout</span>类型会忽略这个值。</p>

<h2>Direct类型的交换器（exchange）</h2>
<p>我们的日志系统广播所有的消息给所有的消费者（consumers）。我们打算扩展它，使其可以能够精确的过滤消息。例如我们也许值是希望当接收到一个严重的错误的时候才把消息写入磁盘，以免浪费磁盘空间。</p>
<p>我们使用的<span class="code ">fanout</span>类型的交换器（exchange）扩展性不够——它能做的仅仅是广播。</p>
<p>我们将会使用<span class="code ">direct</span>类型的交换器（exchange）来代替。路由的算法很简单——交换器将会对<span class="code ">binding key</span>和<span class="code ">routing key</span>进行精确匹配，从而确定消息该分发到哪个队列。</p>
<p>下图能够很好的描述这个场景：</p>
<div class="diagram">
  <img src="./RabbitMQ tutorial - Routing_files/direct-exchange.png" height="170">
  <div class="diagram_source">
    digraph {
      bgcolor=transparent;
      truecolor=true;
      rankdir=LR;
      node [style="filled"];
      //
      P [label="P", fillcolor="#00ffff"];
      subgraph cluster_X1 {
        label="type=direct";
    color=transparent;
        X [label="X", fillcolor="#3333CC"];
      };
      subgraph cluster_Q1 {
        label="Q1";
    color=transparent;
        Q1 [label="{||||}", fillcolor="red", shape="record"];
      };
      subgraph cluster_Q2 {
        label="Q2";
    color=transparent;
        Q2 [label="{||||}", fillcolor="red", shape="record"];
      };
      C1 [label=&lt;C&lt;font point-size="7"&gt;1&lt;/font&gt;&gt;, fillcolor="#33ccff"];
      C2 [label=&lt;C&lt;font point-size="7"&gt;2&lt;/font&gt;&gt;, fillcolor="#33ccff"];
      //
      P -&gt; X;
      X -&gt; Q1 [label="orange"];
      X -&gt; Q2 [label="black"];
      X -&gt; Q2 [label="green"];
      Q1 -&gt; C1;
      Q2 -&gt; C2;
    }
  </div>
</div>

<p>在这个场景中，我们可以看到<span class="code ">direct</span> exchange <span class="code ">X</span>和两个队列绑定了。第一个队列使用<span class="code ">orange</span>作为binding key，第二个队列有两个绑定，一个使用<span class="code ">black</span>作为binding key，另外一个是<span class="code ">green</span>。</p>

<p>这样以来，当routing key为<span class="code ">orange</span>的消息发布到交换器（exchange），就会被路由到队列<span class="code ">Q1</span>。routing key为<span class="code ">black</span>或者<span class="code ">green</span>的消息就会路由到<span class="code ">Q2</span>。其他的所有消息都将会被丢弃。</p>

<h2>多个绑定（Multiple bindings）</h2>
<p></p><div class="diagram">
  <img src="./RabbitMQ tutorial - Routing_files/direct-exchange-multiple.png" height="170">
  <div class="diagram_source">
    digraph {
      bgcolor=transparent;
      truecolor=true;
      rankdir=LR;
      node [style="filled"];
      //
      P [label="P", fillcolor="#00ffff"];
      subgraph cluster_X1 {
        label="type=direct";
    color=transparent;
        X [label="X", fillcolor="#3333CC"];
      };
      subgraph cluster_Q1 {
        label="Q1";
    color=transparent;
        Q1 [label="{||||}", fillcolor="red", shape="record"];
      };
      subgraph cluster_Q2 {
        label="Q2";
    color=transparent;
        Q2 [label="{||||}", fillcolor="red", shape="record"];
      };
      C1 [label=&lt;C&lt;font point-size="7"&gt;1&lt;/font&gt;&gt;, fillcolor="#33ccff"];
      C2 [label=&lt;C&lt;font point-size="7"&gt;2&lt;/font&gt;&gt;, fillcolor="#33ccff"];
      //
      P -&gt; X;
      X -&gt; Q1 [label="black"];
      X -&gt; Q2 [label="black"];
      Q1 -&gt; C1;
      Q2 -&gt; C2;
    }
  </div>
</div><p></p>
<p>多个队列使用相同的binding key是合法的。我们的这个例子，我们可以添加一个<span class="code ">X</span>和<span class="code ">Q1</span>之间的绑定，使用<span class="code ">black</span>binding key。这样一来，<span class="code ">direct</span>交换器就和<span class="code ">fanout</span>交换器的行为一样，将会广播消息到所有匹配的队列。带有routing key为<span class="code ">black</span>的消息都会发送到<span class="code ">Q1</span>和<span class="code ">Q2</span>。</p>
<h2>Emitting logs</h2>
<p>我们将会发送消息到一个<span class="code ">direct</span> exchange，把日志级别作为<span class="code ">routing key</span>。这样子负责处理接收的脚本就可以选择它要处理的日志级别。我们先看看触发日志。</p>

<p>我们需要创建一个交换器（exchange）：</p>
<div class="highlight"><pre><span class="n">channel</span><span class="o">.</span><span class="n">exchange_declare</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s">'direct_logs'</span><span class="p">,</span>
                         <span class="nb">type</span><span class="o">=</span><span class="s">'direct'</span><span class="p">)</span>
</pre></div>


<p>然后我们发送一则消息：</p>
<div class="highlight"><pre><span class="n">channel</span><span class="o">.</span><span class="n">basic_publish</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s">'direct_logs'</span><span class="p">,</span>
                      <span class="n">routing_key</span><span class="o">=</span><span class="n">severity</span><span class="p">,</span>
                      <span class="n">body</span><span class="o">=</span><span class="n">message</span><span class="p">)</span>
</pre></div>


<p>我们先假设“severity”的值是info、warning、error中的一个。</p>
<h2>订阅（Subscribing）</h2>
<p>处理接收消息的方式和之前差不多，但是我们为每一个日志级别创建了一个新的绑定。</p>

<div class="highlight"><pre><span class="n">result</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">exclusive</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">queue_name</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">method</span><span class="o">.</span><span class="n">queue</span>

<span class="k">for</span> <span class="n">severity</span> <span class="ow">in</span> <span class="n">severities</span><span class="p">:</span>
    <span class="n">channel</span><span class="o">.</span><span class="n">queue_bind</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s">'direct_logs'</span><span class="p">,</span>
                       <span class="n">queue</span><span class="o">=</span><span class="n">queue_name</span><span class="p">,</span>
                       <span class="n">routing_key</span><span class="o">=</span><span class="n">severity</span><span class="p">)</span>
</pre></div>


<h2>整合</h2>
<div class="diagram">
  <img src="./RabbitMQ tutorial - Routing_files/python-four.png" height="170">
  <div class="diagram_source">
    digraph {
      bgcolor=transparent;
      truecolor=true;
      rankdir=LR;
      node [style="filled"];
      //
      P [label="P", fillcolor="#00ffff"];
      subgraph cluster_X1 {
        label="type=direct";
    color=transparent;
        X [label="X", fillcolor="#3333CC"];
      };
      subgraph cluster_Q2 {
        label="amqp.gen-S9b...";
    color=transparent;
        Q2 [label="{||||}", fillcolor="red", shape="record"];
      };
      subgraph cluster_Q1 {
        label="amqp.gen-Ag1...";
    color=transparent;
        Q1 [label="{||||}", fillcolor="red", shape="record"];
      };
      C1 [label=&lt;C&lt;font point-size="7"&gt;1&lt;/font&gt;&gt;, fillcolor="#33ccff"];
      C2 [label=&lt;C&lt;font point-size="7"&gt;2&lt;/font&gt;&gt;, fillcolor="#33ccff"];
      //
      P -&gt; X;
      X -&gt; Q1 [label="info"];
      X -&gt; Q1 [label="error"];
      X -&gt; Q1 [label="warning"];
      X -&gt; Q2 [label="error"];
      Q1 -&gt; C2;
      Q2 -&gt; C1;
    }
  </div>
</div>

<p><span class="code ">emit_log_direct.py</span>的代码：</p>
<table class="highlighttable" border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>
<span class="k">import</span> <span class="nn">pika</span>
<span class="k">import</span> <span class="nn">sys</span>

<span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span>
        <span class="n">host</span><span class="o">=</span><span class="s">'localhost'</span><span class="p">))</span>
<span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>

<span class="n">channel</span><span class="o">.</span><span class="n">exchange_declare</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s">'direct_logs'</span><span class="p">,</span>
                         <span class="nb">type</span><span class="o">=</span><span class="s">'direct'</span><span class="p">)</span>

<span class="n">severity</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mf">1</span><span class="p">]</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mf">1</span> <span class="k">else</span> <span class="s">'info'</span>
<span class="n">message</span> <span class="o">=</span> <span class="s">' '</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mf">2</span><span class="p">:])</span> <span class="ow">or</span> <span class="s">'Hello World!'</span>
<span class="n">channel</span><span class="o">.</span><span class="n">basic_publish</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s">'direct_logs'</span><span class="p">,</span>
                      <span class="n">routing_key</span><span class="o">=</span><span class="n">severity</span><span class="p">,</span>
                      <span class="n">body</span><span class="o">=</span><span class="n">message</span><span class="p">)</span>
<span class="k">print</span> <span class="s">" [x] Sent </span><span class="si">%r</span><span class="s">:</span><span class="si">%r</span><span class="s">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">severity</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
<span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>
</td></tr></tbody></table>

<p><span class="code ">receive_logs_direct.py</span>的代码：</p>
<table class="highlighttable" border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>
<span class="k">import</span> <span class="nn">pika</span>
<span class="k">import</span> <span class="nn">sys</span>

<span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span>
        <span class="n">host</span><span class="o">=</span><span class="s">'localhost'</span><span class="p">))</span>
<span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>

<span class="n">channel</span><span class="o">.</span><span class="n">exchange_declare</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s">'direct_logs'</span><span class="p">,</span>
                         <span class="nb">type</span><span class="o">=</span><span class="s">'direct'</span><span class="p">)</span>

<span class="n">result</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">exclusive</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">queue_name</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">method</span><span class="o">.</span><span class="n">queue</span>

<span class="n">severities</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mf">1</span><span class="p">:]</span>
<span class="k">if</span> <span class="ow">not</span> <span class="n">severities</span><span class="p">:</span>
    <span class="k">print</span> <span class="o">&gt;&gt;</span> <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"Usage: </span><span class="si">%s</span><span class="s"> [info] [warning] [error]"</span> <span class="o">%</span> \
                         <span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mf">0</span><span class="p">],)</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mf">1</span><span class="p">)</span>

<span class="k">for</span> <span class="n">severity</span> <span class="ow">in</span> <span class="n">severities</span><span class="p">:</span>
    <span class="n">channel</span><span class="o">.</span><span class="n">queue_bind</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s">'direct_logs'</span><span class="p">,</span>
                       <span class="n">queue</span><span class="o">=</span><span class="n">queue_name</span><span class="p">,</span>
                       <span class="n">routing_key</span><span class="o">=</span><span class="n">severity</span><span class="p">)</span>

<span class="k">print</span> <span class="s">' [*] Waiting for logs. To exit press CTRL+C'</span>

<span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">ch</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">properties</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
    <span class="k">print</span> <span class="s">" [x] </span><span class="si">%r</span><span class="s">:</span><span class="si">%r</span><span class="s">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">method</span><span class="o">.</span><span class="n">routing_key</span><span class="p">,</span> <span class="n">body</span><span class="p">,)</span>

<span class="n">channel</span><span class="o">.</span><span class="n">basic_consume</span><span class="p">(</span><span class="n">callback</span><span class="p">,</span>
                      <span class="n">queue</span><span class="o">=</span><span class="n">queue_name</span><span class="p">,</span>
                      <span class="n">no_ack</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">channel</span><span class="o">.</span><span class="n">start_consuming</span><span class="p">()</span>
</pre></div>
</td></tr></tbody></table>

<p>如果你希望只是保存warning和error级别的日志到磁盘，只需要打开控制台并输入：</p>
<div class="highlight"><pre><span class="nv">$ </span>python receive_logs_direct.py warning error &gt; logs_from_rabbit.log
</pre></div>


<p>如果你希望所有的日志信息都输出到屏幕中，打开一个新的终端，然后输入：</p>
<div class="highlight"><pre><span class="nv">$ </span>python receive_logs_direct.py info warning error
 <span class="o">[</span>*<span class="o">]</span> Waiting <span class="k">for </span>logs. To <span class="nb">exit </span>press CTRL+C
</pre></div>


<p>如果要触发一个<span class="code ">error</span>级别的日志，只需要输入：</p>
<div class="highlight"><pre><span class="nv">$ </span>python emit_log_direct.py error <span class="s2">"Run. Run. Or it will explode."</span>
 <span class="o">[</span>x<span class="o">]</span> Sent <span class="s1">'error'</span>:<span class="s1">'Run. Run. Or it will explode.'</span>
</pre></div>


<p>这里是完整的代码：(<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/python/emit_log_direct.py">emit_log_direct.py</a>和<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/python/receive_logs_direct.py">receive_logs_direct.py</a>)</p>
<p><a href="http://www.rabbitmq.com/tutorials/tutorial-five-python.html">教程5</a>展示了如果通过一个模式来监听消息。</p>
</div><div class="clear"></div><div class="pageFooter"><p class="righter"><a href="http://www.rabbitmq.com/contact.html">Contact</a> |
        <a href="http://www.rabbitmq.com/about.html">About</a></p><p>Copyright © 2011 VMware, Inc. All rights reserved.</p></div></div>


</body></html>